Access control
	- The different access levels determine who can use a particular field or class.
	- There are four different levels; 
		1. public which can be accessed by Class, Package, Subclass and world (inbetween packages)
		2. protected which can be accessed by Class, Package and Subclass (not inbetween packages)
		3. no modifier which can be accessed by Class and Package
		4. private which can only be accessed by the Class
	- If other programmers can access your class, you want to make sure that misuse does not happen
		therefore the most restrictive access level should be used. Use Private unless you don't have a 
		good reason not to.
Errors
	Compile time error - the java compiler can't compile the code, often because of syntax errors. Typical candidates:
		- missing brackets
		- missing semicolons
		- access to private fields in other classes
		- missing classes on the classpath (at compile time)

	Runtime error - the code did compile, can be executed but crashes at some point, like you have a division by zero.
		- using variable that are actually null (may cause NullPointerException)
		- using illegal indexes on arrays
		- accessing ressources that are currently unavailable (missing files, ...)
		- missing classes on the classpath (at runtime)

Exceptions
	- An exception can be enclosed in a try catch block, or send the exception the next method higher up in the call stack
	- more

Functionalities
Interface
	- Interface is the 'interface' between the object and the world. Just like buttons are the interface between you and an apperatus.
	- 
Interface constant
	- An interface constant is implicitly public, static and final. 
	- such interface constants can be referenced in two ways:
		1. via reference from instance of the interface
		2. via the class name of the interface itself

	eg. interface Foo141 
		{ 
		    int k = 0; /* Line 3 */
		} 
		public class Test141 implements Foo141 
		{
		    public static void main(String args[]) 
		    {
		        int i; 
		        Test141 test141 = new Test141(); 
		        i = test141.k; /* Line 11 */ // These
		        i = Test141.k; 				 // All
		        i = Foo141.k; 				 //	Work
		    } 
		}
Static methods
	- rule of thumb is that if it makes sense to call this method even if no object has been created yet, use static.
	other cases, follow this:
	- If you are writing utility classes and they are not supposed to be changed.
	- If the method is not using any instance variable.
	- If any operation is not dependent on instance creation.
	- If there is some code that can easily be shared by all the instance methods, extract that code into a static method.
	- If you are sure that the definition of the method will never be changed or overridden. As static methods can not be overridden

methods I should know by heart:
	- Arrays.toString(arr)				Converts array to string
	- Arrays.equals(arr1, arr2) 		Returns true if arr1 and arr2 are equal
	- Arrays.sort(arr)					Sorts the array

	- HashMap<Integer, String[]> map = new HashMap<Integer, String[]>();  // Creates a hashmap to store all students in
	  For(String s : arr) map.put(s.getID(), s);						  // maps to certain index based of unique student ID
	
Generating random numbers:
	- Random random = new Random()
	- int i = random.nextInt(k) // produces a random value between 0 and k, not including k.

Final keyword
	- if applied to a class, the class cannot be subclassed
	- if applied to a method, the method cannot be overwritten by a subclass
	- if applied to a variable, the variables value cannot be changed once initialized

Polymorphism
	- in programs that use inheritance
	- public interface Vegetarian{}
	  public class Animal{}
	  public class Deer extends Animal implements Vegetarian{}

	  The deer class is considered polymorphic as it can be multiple things:
	  1. deer IS A Vegetarian
	  2. deer IS A Animal
	  3. deer IS A deer
	  (4. deer IS A object)

	- The capability of a method to do different things (through method overloading or method overriding) depending on the object that it is operation on. 

Method overloading
	- When a class has two methods of the same name, but differs in either
		1. number of parameters
		2. Data type of parameters
		3. Sequence of data type parameters